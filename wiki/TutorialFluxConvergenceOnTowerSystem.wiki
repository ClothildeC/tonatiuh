#summary One-sentence summary of this page.

= Introduction =

 * The main aim of this tutorial is explain how to analyze the tonatiuh output data to stimate the flux distribution on the target.


= Characteristics of the system =

The system we want to simulate consists of:

 * A tower.
 * One heliostat.
 * A flat plane as a receiver.

=General aspects of the system =

The system we are going to simulate is made up of a flat square of 15 x 15 meters located on the top of a cylindric tower of 150 meters heigth.
400 meters away of the tower, we are going to create a flat square with a surface of 60 m<sup>2</sup> . This flate rectangle called Heliostat is going to with an inclination of 45º compared to the ground.
We are asumming that the solar concentrating system is placed in Sevilla, Spain at 11.00 A.M.
 
= Modeling the system =

== Modeling the tower ==
 * Once tonatiuh is opened, we have to select the rootNode and, then, add a TSeparator as a childen. The TSeparator node is the blue circular buttom allocated on the icon bar.
 * When the node is created, rename it to "Tower". With this new node selected, create a new TSeparator as a node child and rename it to "Base".
 * If we select the "Base" node,we can add one shape on it. Only if we create first a TShapeKit node (the red circle icon next to the blue one), we will be able to insert a shape.
 * With the TShape node, previously created, selected, we can add a shape. In this case, we are using a cylinder shape called Cylinder. We can find it on the plugin menu bar.
 * Once the cylinder is created, select it and change their values to those ones:
{{{
radious        15
length         120
phiMax         6.2831855
activeSide     OUTSIDE
}}}
 * Now, it is time to create the target. Select the node "Tower" and create a new TSeparator. Rename it to "Target". Change it transform values to:
{{{
translation        0 100 0
rotation           0 1 0 1.5707964
scaleFactor        1 1 1 
scaleOrientation   0 0 1 0 
center             0 0 0 
}}}

 * Select the new node and add a new TSeparatorKit as a child. Rename it to "target" and change the parameters to:
{{{

rotation           0 0 -1 1.5707964
scaleFactor        1 1 1 
scaleOrientation   0 0 1 0 
center             0 0 0 
}}}
 * Add a new TShapeKit as a child of the last node created.Now add a new shape as a child.In this example, the shape must be a "flat_rectangle". If we have created it properly, it should be visible on the 3D scene viewer.
 * Set those parameters on the "flat_rectangle" options:
 {{{
width        15
heigth       15
activeSide   FRONT
 }}}
 * Select the last TShapekit created and add a "specular_standar_material" as a child. 


== Modeling the heliostat ==

By this moment, the tower of the system has been created. Now we need to create the heliostat. According to the initial conditions, the heliostat must be situated 400 meters away the tower with an inclination of 45º. To create it, follow those steps:
 * Select the rootNode and create TSeparator node by clicking on the "Group Node" icon. Rename it to "heliostat". We want the heliostat with an inclination of 45º and 400 metres away the tower. To fix the heliostat on the correct point we need to know the values for x and z. For x we have to calculate cos(45º) x 400. For z we have to calculate sen(45º) x 400. now we have to set them on the "helioStat" transform parameters in that way:
{{{
translation    282.85 0 282.85
 }}}

 * Select "Heliostat" and add a new TSeparator. Rename it to "heliostatSurface".

 * Select the last node created and add a Traker (the last icon on the rigth icon bar). In the transform options,change the aimingPoint to:
 {{{
aimingPoint   0 100 0
 }}}
 The main property of this element is to make the heliostat change the position  while the sun is moving. Doing that, we can project more rays from the sun to to the target.
 * Select the "heliostatSurface" node and add a TShapeKit node.
 * Now, add a "flat-rectangle" shape and a "specular_Standar_material" as a child on the previous TShapeKit.
 * We want a square flat which surface of with a surface of 60 m<sup>2</sup>. So we have to set it values to:
 {{{
width         7.7399998
heigth        7.7399998
activeSide    FRONT
 }}}
If we have done all steps successfully, we are about to run the system.

== Running the system ==

The main purpose of Tonatiuh is to get information about how rays can reach the target. We can simulate the rays in two ways: 
 * The easiest one consists of pressing the run button in the icon bar. You only obtain one photon map for each interaction. To expoer the pohoton map press Ray Trace, export photmmap.


 * The other is using the script editor.You can obtain it pressing Automation -->script editor. This will display a new window. A basic script can be like this:
{{{
//load the file
tonatiuh_filename( "HeliostatSunSevilla.tnh" ); 
//number of rays to simulate
tonatiuh_numrays( 1000000  ); 

//type of phton map
tonatiuh_photon_map("PhotonMapDefault"); 
//type of random
tonatiuh_random_generator("Mersenne Twister"); 
//patch of the target
var concentratorSurface = "//RootNode/Tower/Target/Target/Target"; 
//output folder/name of file to export. create the folder previously
var concentratorFileName = "folder/filename"; 

//number of interactions
for( var i = 1; i <= 400; ++i ){ 
	tonatiuh_trace(); //simulate the system
	var s = i.toString();
//export the photon map data
	tonatiuh_export(  concentratorFileName.concat( "_", s, ".dat" ),  concentratorSurface, false );
}
}}}
 The results in that case are saved automatically into the folder we have defined in concentratorFileName variable.

= Tonatiuh post-processing =

Tonatiuh doesn't provide a photon map results analizer so it's necessary to use an external aplication such as Mathematica and R. The output photon map is saved in a .dat extension in a seven-tuple for each photon.

== Data post-processing with Mathematica ==
 We use mathematica to know when the photon maps converge. when we compare the convergence two by two, we get the relative error. if this error reaches a value lower than 0.5% in at least 5 cases, we will admit the result.