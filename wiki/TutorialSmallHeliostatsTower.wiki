#summary How to model a tower system with 500 one-facet small heliostats.

= Introduction =
This tutorial explains:

 * How to use “!Tracker_Heliostat” plug-ins to embed  solar tracking behavior within the Tonatiuh model of a solar concentrating system.
 * How to use the scripting capabilities of Tonatiuh to automate the use of the program to simulate the optical behavior of a tracking solar concentrating system as a function of the sun position in the sky.
 * How to use Mathematica to post-process the results generated by Tonatiuh to compute the solar flux distribution incident upon a flat rectangular surface.
 * How to combine Tonatiuh and Mathematica capabilities to generate a optical efficiency matrix to characterize the optical behavior of a tower system.


= General assumptions and goals =

== Heliostat field solar collection efficiency == 
For a given position of the sun in the sky and a given value of the direct solar irradiance, what we want to estimate is the heliostat field solar collection efficiency. This efficiency is defined as the ratio between the amount of solar energy that reaches the central receiver input aperture plane and the maximum amount of solar energy that could reach the mirrored surfaces of the heliostat field.

From the above definition of the heliostat field solar collection efficiency, it follows that this efficiency is a function of the heliostat reflectivity, the atmospheric transmissivity, the distances from the heliostats to their corresponding aiming points in the central receiver input aperture plane, the angle of incidence of the direct solar radiation upon the heliostats' mirrors (cosine factor) and the blocking and shadowing among heliostats.

=== Simplifications ===
To simplify matters, for the purpose of this tutorial, we will assume that all heliostats in the the heliostat field have the same reflectivity. If this is the case, the average heliostat reflectivity will appear in both the numerator and the denominator of the expression to estimate the solar collection efficiency of the heliostat field, and, thus, it will disappear from the expression. This implies that, in this specific case and for the specific assumptions we are considering, any average reflectivity value greater than zero will suffice for the purpose of calculating the heliostat field collection efficiency. Thus, we set the average heliostat reflectivity to one.

Furthermore, for simplicity, we assume that the atmospheric losses from the heliostats to the central receiver aperture plane, due to atmospheric transmittance, are just one and the same small constant fraction for all heliostats, whatever their position in the field. With this assumption, as in the average heliostat reflectivity case, the atmospheric transmittance will reduce to an average value that will show up both in the numerator and denominator of the heliostat field solar collection efficiency calculation, canceling each other out. Because of this, for this tutorial, we set the atmospheric transmittance to one.

With this simplifying assumptions the heliostat field solar collector efficiency will only depends, at any given instance of the day, on the cosine factor and the shadowing and blocking.

=== Goal of the tower system analysis ===
What we want to illustrate with this Tutorial is how you can use Tonatiuh to generate a look-up table or matrix of heliostat field solar collection efficiency values as a function of the two angles that define the Sun position in the sky (solar azimuth and zenith angle).

This look-up table will allow you to interpolate, for any given sun position, the solar collection efficiency of the tower system under analysis. An information that is relevant for many purposes, such as, for instance, to establish a quantitative metric to drive a heliostat field layout automatic optimization process.

= Characteristics of the tower system to simulate =
The tower system that we want to model in this tutorial consist of:

 * A dense heliostat field of 500 small 5 m x 5 m one-facet heliostats,
 * A tower, and
 * The input aperture of the solar central receiver.

Figure 1 shows the basic layout the heliostat field and the relative location of the tower. As it can be seen, the heliostats form an array of 25 columns and 20 rows, regularly spaced.

From the dimensions presented in the figure, knowing that the distance between the centers of the facets of two adjacent heliostats located in a row, or column, is 5.5 meters, it is straightforward to compute the relative coordinates of the center of the facet of each heliostat in the field. Obviously, to do that you need to select the position of the origin of coordinates. For convenience, we fix this origin at the center of the heliostat field, with the positive x-axis towards the East, the postive y-axis towards the zeinth, and the positive z-axist towards the North.


||<a href="http://picasaweb.google.com/lh/photo/zSYmj10T-INIlzN09Dl_VQ?feat=embedwebsite"><img src="http://lh6.ggpht.com/_tmEVMS15i5Y/TNu3lklUMBI/AAAAAAAAAvI/S4_xlucHQNA/s400/tutorial_01_plant_layout2.png" height="347" width="400" /></a>||
|| *Figure 1.* Tower system layout.||

We will assume that all of the heliostats will aim to the center of the input aperture, which is a 10 meters by 10 meters target with its center 130 m above the plane defined by the centers of the facets of the heliostats.

= Basic heliostat modeling =
The heliostat to model is an small one-facet heliostat. Only the mirror needs to be modeled in Tonatiuh, since for a given heliostat the supporting mirror structure and tracking mechanism is not expected to cast relevant shadows on nearby heliostats.

== Heliostat shape ==
The heliostat mirror is assumed to be a 5 meters by 5 meters spherical rectangular mirror. Since, for the heliostat field that will be modeled, the characteristic slant range of a heliostat is 150 m, the radius of the spherical mirror will be 300 m.

Therefore, to model the shape of the heliostat in Tonatiuh, please, do the following:

 # Go to the Tree View of Tonatiuh and click on the !RootNode TSeparatorKit to select it.
 # Once the !RootNode is selected, go to the plug-in Menu Bar and click on  the TSeparatorKit icon to insert a new TSeparatorKit below !RootNode.
 # Double click on the newly inserted TSeparatorKit and change its name from “TSeparatorKit1” to “Heliostat”.
 # With the “Heliostat” node selected in the Tree View, go to the plug-in Menu Bar and click on the !ShapeKit icon to insert a new TShapeKit object below the “Heliostat” TSeparatorKit.
 # Expand the “Heliostat” node, if it is not already expanded, to make the newly created TSeparatorKit visible in the Tree View. Once it is visible, double click on to change its name from “TShapeKit1” to “Mirror”.
 # With the newly created “Mirror” TSeparatorKit selected, go to the plug-in Menu Bar and click on the “Spherical_rectangle” icon to insert a new “Spherical_rectangle” shape node under the “Mirror” TShapeKit. This new shape node will be created with the default name “Spherical_rectangle”, keep that name.
 # With the “Spherical_rectangle” shape node selected in the Tree View, go to the “!ShapeSphericalRectangle” dialog that will appear below the Tree View and change the values of of the parameters that define this shape node to:
{{{
radius     300
width X    5
widthZ     5
activeSide INSIDE
}}}

Figure 2 shows the GUI of Tonatiuh after finishing the above steps. You can see the 5 m x 5 m spherical facet of the small heliostat in Tonatiuh's 3D view, the nodes that compose the Heliostat in Tonatiuh's Tree View, and the values that define the main parameter of the spherical heliostat facet in the Object Inspector view, just below the Tree View.

||<a href="http://picasaweb.google.com/lh/photo/iLnAZ6EyD3wK2ZEZuA006A?feat=embedwebsite"><img src="http://lh6.ggpht.com/_tmEVMS15i5Y/TNqvQaaCObI/AAAAAAAAAuU/qz51aN7FzHs/s400/HeliostatModeling01.png" height="320" width="400" /></a>||
|| *Figure 2.* State of Tonatiuh's GUI after finishing the steps outlined.||

Obviously, the content of the Object Inspector view changes depending on the Tree View item selected. Thus, if instead of having the Spherical-rectangle shape node selected you have the "Heliostat" TSeparatorKit selected you will see the !SeparatorKit Transform dialog, showing the following parameter values.
{{{
translation       0 0 0
rotation          0 0 1 0
scaleFactor       1 1 1
scaleOrientation  0 0 1 0
center            0 0 0
}}}

== Heliostat mirror material ==
Once the shape of the heliostat facet has been modeled, it is the time to model the heliostat mirror material. To do this, please, do the following:

 #  Select the heliostat TShapeKit node labeled "Mirror".
 # With the heliostat TShapeKit selected, go to the Tonatiuh plug-ins Menu Bar and select the !Specular_Standard_Material icon.
 # After the new material note is created within the heliostat's TShapeKit, select the material node to change the default material's properties.
 # In the !MaterialStandardSpecular preperties dialog that will appear below the Tree View, for the purpose of this tutorial, please, change the value of the parameter “m_reflectivity” from 0 to 1.

||<a href="http://picasaweb.google.com/lh/photo/BxO7cknLaqRnwLYV5y_9Sw?feat=embedwebsite"><img src="http://lh4.ggpht.com/_tmEVMS15i5Y/TNsw0yX5PaI/AAAAAAAAAus/avaPRGfadkQ/s800/tutorial_01_TreeViewStatus.png" height="275" width="293" /></a>||
|| *Figure 3.* Tonatiuh's Tree View after adding the material.||

After following the above steps the Tree View of Tonatiuh should look as in Figure 3.

= Basic central receiver input aperture modeling =
To model the target do the following:
 # In Tonatiuh's Tree View click on the TSeparatorKit "!RootNode".
 # Go to the plug-ins Menu Bar and click on the TSeparatorKit icon, to add a new TSeparator as a new children of "!RootNode".
 # Double click on the newly created TSeparatorKit node and change its name to "!Target_Frame".
 # With the "!Target_Frame" node selected, go to the "Transform" properties dialog, just below the tree view, and set the transform propoerties as follows:
{{{
translation        0 130 74.25
rotation           -1 0 0 1.5707964
scaleFactor        1 1 1
scaleOrientation   0 0 1 0
center             0 0 0
}}}
 # With the TSeparatorKit "!Target_Frame" selected in the Tree View, go to the plug-ins Menu Bar and click on the TShapeKit icon to create a TShapeKit node under the "!Target_Frame" node.
 # By default this newly created TShapeKit will be labeled "TShapeKit1", double click on the name and change it to "!Target_ShapeKit".
 # With the "!Target_ShapeKit" node selected, go to the plug-ins Menu Bar and click on the "!Flat_rectangle" TShapeNode icon to add a TShapeNode to the "!Target_ShapeKit".
 # By default this newly created TShapeNode will be labeled "!Flat_Rectangle", keep the name.
 # Click on the "Flat_Rectangle" TShapeNode to select it. Go to the “!ShapeFlatRectangle” dialog that will appear below the Tree View and change the values of of the parameters that define this shape node to:
{{{
width      10
height     10
activeSide FRONT
}}}

 # Once the shape of the target has been modeled, it is the time to model the material. To do this, please, do the following:

     * Under the "!Target_Frame" TSeparatorKit click the TShapeKit node labeled "!Target_ShapeKit" to select it.
     * With the "!Target_ShapeKit" selected, go to the Tonatiuh plug-ins Menu Bar and select the !Specular_Standard_Material icon.
     * After the new material node is created within the "!Target_ShapeKit" node, click on it to select it.
    * With the "!Specular_Standard_Material" node selected go to the !MaterialStandardSpecular preperties dialog that will appear below the Tree View, and verify that value of “m_reflectivity” is set to 0.

TO BE CONTINUED...