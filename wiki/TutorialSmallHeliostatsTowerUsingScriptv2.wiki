#summary How to model a tower system with 500 one-facet small heliostats using the Tonatiuh script tool. Valid for Tonatiuh 2.0.0.

= Introduction =

This tutorial is going to be an introduction to tonatiuh script tool, which will allow users to create easier solar concentrating systems.


= Main functions =

Those are the functions to develop a system by scripting. They are explained following an alphabetic order:
 * *AddExportSurfaceURL( QString nodeURL )* : Adds the surface with the URL _nodeURL_ to the export surfaces list. The _nodeURL_ is the tree nodes names starting form the root ("\\!SunNode\ROOTNODENAME ", where ROOTNODENAME is the name of the root node in the scene ) to the surface node ( the node that contains the surface shape and material).

 * *!ChangeSunPosition(double azimuth, double elevation)*: Sets the sun azimuth and sun elevation to those new values. The sun will be automatically  updated.

 * *!ChangeSunPosition( int year, int month, int day, double hours, double minutes, double seconds, double latitude, double longitude )*: Changes the sun position to the position defined for a location ( latitude and _longitude_ in degrees) and for the time in UT. 	

 * *Copy()*: Copies the selected node to the clipboard.

 * *Copy( QString nodeURL )*: Copies the node defined by _nodeURL_ to the clipboard.

 * *!CreateGroupNode()*: Creates a separator node as a child of current selected node.

 * *!CreateAnalyzerNode()*: Creates an analyzer node as a child of current selected node.

 * *!CreateMaterial( QString materialType )*: Creates material node of type _materialType_ as a child of current selected node.

 * _!CreateShape( QString shapeType )_: Creates a new shape node of type _shapeType_ as a child of current selected node.

 * *!CreateSurfaceNode()*: Creates a Surface node as a child of current selected node.

 * *!CreateTracker( QString trackerType )*: Creates a new tracker of type _trackerType_ as child of the current selected node.

 * *Cut()*: Cuts the selected node and saves it at the clipboard.

 * *Cut( QString nodeURL )*: Cuts the node defined as _nodeURL_ and saves it at the clipboard.

 * *Delele()*: Deletes selected node.

 * *Delete( QString nodeURL )*: Deletes the node defined as _nodeURL_ and the childreon of this node form the scene.

 * *!InsertFileComponent( QString componentFileName )*: Inserts as a child of the selected node the Tonatiuh component saved at the file _componentFileName _.

 * *New()*: Opens an empty Tonatiuh scene.

 * *Open( QString fileName )*: Opens the _fileName_ file.

 * *Paste( QString nodeURL, QString pasteType )*: Pastes the node allocated on the clipboard as a child of _nodeURL_. The second argument, _pasteType_, indicates the type of paste, _Shared_ or _Copied_.
 
 * *!PasteCopy()*: Pastes the node allocated on the clipboard as a new child of the selected node.

 * *!PasteLink()*: Pastes the node allocated on the clipboard as a child of the selected node. Instead a new node, this function creates a new pointer to the physical node.

 * *Run()*: Runs the ray tracer for the current scene.

 * *!ResetAnalyzerValues()*: Resets analyzer values.

 * *!SaveAs( QString fileName )*: Saves the current system into _fileName_.

 * *!SelectNode( QString nodeURL )*: Selects the _nodeURL_.

 * *!SetAimingPointAbsolute()*: Sets the _!AimingPoint_ parameter value to _Absolute_ value.

 * *!SetAimingPointRelative()*: Sets the _!AimingPoint_ parameter value to _Relative_ value.
 
 * *!SetExportAllPhotonMap()*: Sets to save all intersection photons.

 * *!SetExportCoordinates( bool enabled, bool global )*: If _enabled_ is _false_ the photons coordintates will not be saved into simulations results. Otherwise, the coordinates will be saved into scene coordiantes if _global_ is true or in local coordinates relative to ntersection surface.

 * *!SetExportIntesectionSurface( bool enabled )*: If _enabled_ is _true_ the intersection surface will be saved for all photons. Otherwise, this information will not be saved.

 * *!SetExportIntesectionSurfaceSide( bool enabled )*: If _enabled_ is _true_ the side of the surface where ray has been intersected. Otherwise, this information will not be saved.
 
 * *!SetExportPhotonMapType( QString exportModeType )*: Sets the export photon type to _exportModeType_. Currently the _"SQL_Database"_, _"Binary_file"_ and _"Not export"_ are available.

 * *SetExportPreviousNextPhotonID( bool enabled )*:  If _enabled_ is _true_ the photon previous and next photons ID will be saved. Otherwise, this information will not be saved.

 * *!SetExportTypeParameterValue( QString parameterName, QString parameterValue )*: Sets to current selected export type parameter called _parameterName_ the value _parameterValue_.
  * For _"Binary_file"_ the parameters are:
   * "!ExportDirectory": the directory path to store binary files.
   * "!ExportFile": the binary files root name.
   * "!FileSize": the maximum photons that can be stored into a file. Use "-1" to save into a one file.
  * For _"QSL_Database"_ the parameters are:
   * "!ExportDirectory": the path of directory where the DB will be stored.
   * "DBFilename": The file name for the database.

 * *!SetIncreasePhotonMap( bool increase )*: Decides whether increase the photonMap or not for consecutive ray tracer executions.

 * *!SetNodeName( QString nodeName )*: Changes the selected node name to _nodeName_.

 * *!SetPhotonMapBufferSize( unsigned int nPhotons )*: Sets to _nPhoton_ the maximum number of photons that the photon map can store.
 
 * *!SetRandomDeviateType( QString typeName )*: Sets the type of random number generator to _typeName_. Current Tonatiuh version has available _"Mersenne Twister"_ and _"Rng Stream"_ generators.

 * *!SetRayCastingGrid(int widthDivisions, int heightDivisions)*: Sets the number of sun divisions.

 * *!SetRaysDrawingOptions( bool drawRays, bool drawPhotons )*: Sets to draw rays and photons after simulations.

 * *!SetRaysPerIteration( unsigned int rays )*: Sets the number of rays to trace per each ray trace execution.

 * *!SetSunshape( QString sunshapeType )*: Sets the sunshape type to _sunshapeType_ if it is valid type. Currently _"!Buie_Sunshape"_ and _"!Pillbox_Sunshape"_.

    * *!SetRaysDrawingOptions( double raysFraction, bool drawPhotons)*: cks between display or not the Photons and the percent of rays to draw after running the system.

 * *!SetSunShapeParameter( QString parameter, QString value )*: Assigns the _value_ to the sun parameter _parameter_.

 * *!SetTransmissivity( QString transmissivityType )*: Sets the scene transmissivity to _transmissivityType_. The following types are available currently:
  * _"Default Transmissivity"_
  * _"Ballestrin Transmissivity"_
  * _"Mirval Transmissivity"_
  * _"Sengupta-NREL Transmissivity"_
  * _"!VantHull Transmissivity"_
  * _"!VittitoeBiggs Transmissivity"_

 * *!SetTransmissivityParameter( QString parameter, QString value )*: Assings the value into _value_ to the _parameter_ into the current defined transmissivity.

 * *!SetValue( QString nodeURL,QString parameter, QString value)*: Sets to parameter with the name _parameter_ of the node _nodeURL_, the value defined into _value_.

= How to use the functions =

Once the script editor window is opened, you can use a function only by typing tonatiuh and then, the name of the function to use. For example:

{{{
tonatiuh.New(); //Creates a new file
tonatiuh.!CreateShape("Cone"); //Creates a cone.
}}}
Pressing the buttom Run will ejecute it.

= Script Example =

To explain more in detail the script funcionality we are going to develop <a href=http://code.google.com/p/tonatiuh/wiki/TutorialFluxConvergenceOnTowerSystemv2> this tutorial </a> using above functions.

== Modeling the tower ==

The tower is the element in which surface will be fixed the target frame. It will have 120 meters height. 
To build it, click Automation-->Script Editor to open the script editor window and, please,type:

{{{
//Star with an empty system 
tonatiuh.New(); 
 
//Select the RootNode  
tonatiuh.SelectNode("//SunNode/RootNode");  
  
//Creates a new TSeparatorKit  
tonatiuh.CreateGroupNode();  
  
//Select it  
tonatiuh.SelectNode("//SunNode/RootNode/TSeparatorKit1");  
  
//Change the default name to Tower 
tonatiuh.SetNodeName("Tower");  
tonatiuh.SelectNode( "//SunNode/RootNode/Tower" ); 
 
//Creates a new TSeparatorKit to Base node. 
tonatiuh.CreateGroupNode();  
tonatiuh.SelectNode( "//SunNode/RootNode/Tower/TSeparatorKit1" ); 
tonatiuh.SetNodeName( "Base" ); 
 
//Change in Tower the values of the "translation" parameter to "0 120 8"  
tonatiuh.SetValue("//SunNode/RootNode/Tower/Base","translation","0 120 8");  
//Set Base values of "rotation" parameter to "1 0 0 1.5707964"  
tonatiuh.SetValue("//SunNode/RootNode/Tower/Base","rotation","1 0 0 1.5707964");  
//Set Base scale values. 
tonatiuh.SetValue("//SunNode/RootNode/Tower/Base", "scaleFactor", "1 0.5 1");  
  
//Create a SurfaceNode as a child of "Base"  
tonatiuh.CreateSurfaceNode();  
 
//Select the last node created and rename it to "TowerBaseSurface" 
tonatiuh.SelectNode("//SunNode/RootNode/Tower/Base/TShapeKit1"); 
tonatiuh.SetNodeName("TowerBaseSurface"); 
 
//Creates a cone shape as a child of TowerBaseSurface. 
tonatiuh.CreateShape( "Cylinder" ); 
 
//Creates a variable with the route to avoid typing it  the whole time 
var baseSurfaceNode = "//SunNode/RootNode/Tower/Base/TowerBaseSurface/Cylinder"; 
 
//Change some cylinder properties 
tonatiuh.SetValue( baseSurfaceNode, "radius", "15" ); 
tonatiuh.SetValue( baseSurfaceNode, "length", "120");
}}}

As soon as those lines were typed, please, click Run button and the tower will be created. 
=== Note:=== 
*I recommend NOT to copy this code directly on the script window of Tonatiuh because it ommits the "intro" command. It would be better save it in a file with a .tnhs extension such as tower.tnhs and, then, open it through the script editor.

== Modeling the receiver ==

Now, continue modeling, in that case, with the receiver. This shape will receive the whole rays reflected on the heliostats field. (The field will be created later). It will be a 20m x 20 m square.
So the following piece of code will create it:

{{{
//Select Tower node to create the target
tonatiuh.SelectNode( "//SunNode/RootNode/Tower" ); 
tonatiuh.CreateGroupNode();  
tonatiuh.SelectNode( "//SunNode/RootNode/Tower/TSeparatorKit1" ); 
tonatiuh.SetNodeName( "Target" ); 
 
//Change in Target node "translation" parameter values to "0 100 0"  
tonatiuh.SetValue("//SunNode/RootNode/Tower/Target","translation","0 100 0");  
//Set Target values of "rotation" parameter to "-1 0 0 1.5707964 "  
tonatiuh.SetValue("//SunNode/RootNode/Tower/Target","rotation","-1 0 0 1.5707964 ");  


//Select Target node to create a rotation node
tonatiuh.SelectNode( "//SunNode/RootNode/Tower/Target" ); 
tonatiuh.CreateGroupNode();  
tonatiuh.SelectNode( "//SunNode/RootNode/Tower/Target/TSeparatorKit1" ); 
tonatiuh.SetNodeName( "TargetRotationNode" ); 
 
//Set "TargetRotationNode" values of "rotation" parameter to " 0 1 0  3.1415927"  
tonatiuh.SetValue("//SunNode/RootNode/Tower/Target/TargetRotationNode","rotation"," 0 1 0  3.1415927");  

//Now, create target surface node
tonatiuh.CreateSurfaceNode();  
//Select the last node created and rename it to "TargetSurface"
tonatiuh.SelectNode("//SunNode/RootNode/Tower/Target/TargetRotationNode/TShapeKit1"); 
tonatiuh.SetNodeName("TargetSurface"); 

//Add the shape and material to the surface
tonatiuh.CreateShape( "Flat_Rectangle"); 
tonatiuh.CreateMaterial( "Specular_Standard_Material" ); 

//Change some cylinder properties 
var targetShapeceNode = "//SunNode/RootNode/Tower/Target/TargetRotationNode/TargetSurface/Flat_Rectangle"; 
tonatiuh.SetValue( targetShapeceNode, "width", "20" ); 
tonatiuh.SetValue( targetShapeceNode, "height", "20");
}}}

== Modeling the heliostats field ==

Once the tower and the target are created, it is time to create the heliostats field. We want to create a 20 rows x 25 columns shape of heliostats. In this case, the centers of the facets of two adjacent heliostats located in a row, or column, is 5.5 meters. 


{{{
//Create a variable with the path
var rootnode="//SunNode/RootNode";

//Select the RootNode and create a new TSeparatorKit node.

tonatiuh.SelectNode(rootnode);
tonatiuh.CreateGroupNode();

//Select it and rename to HeliostatField_Frame

tonatiuh.SelectNode(rootnode.concat("/TSeparatorKit1"));
tonatiuh.SetNodeName("HeliostatField_Frame");
var helFramePath=rootnode.concat("/HeliostatField_Frame");

//trans represents the z_position of the heliostasts
//this first one is in z=-52.3 and they  are separated 5.5 meters

var trans=-52.3;
//We are going to create 20 rows

for(i=1;i<=20;++i){

          //Create a new TSeparatorKitNode

          tonatiuh.SelectNode(helFramePath);
          tonatiuh.CreateGroupNode();
          tonatiuh.SelectNode(helFramePath.concat("/TSeparatorKit1"));

          //set the value of translaation to the heliostat

          tonatiuh.SetValue(helFramePath.concat("/TSeparatorKit1"),"translation","0 0".concat(" ",trans));

          //Change the node name to Row0i_Frame. i goes from 0 to 20
          //The first node will be called Row01_Frame and the last one Row020_Frame

          tonatiuh.SetNodeName("Row0".concat("",i).concat("_Frame"));

          
          //Select the node created create a group node as a child and rename it to Row

          var row=helFramePath.concat("/Row0".concat("",i).concat("_Frame"));
          tonatiuh.SelectNode(row);
          tonatiuh.CreateGroupNode();
          tonatiuh.SelectNode(row.concat("/TSeparatorKit1"));
          tonatiuh.SetNodeName("Row");

          //for each row, we have to create the tree to alocate 25 heliostats

          var NewRow=row.concat("/Row");

          //translation represents the x_position of the heliostasts
          //this first one is in x=-66 and they  are separated 5.5 meters

          var translationRow=-66;
          for(j=1;j<=25;++j){

                            //Create a new GroupNode and change the translation value
                            tonatiuh.SelectNode(NewRow);
                            tonatiuh.CreateGroupNode();
                            tonatiuh.SelectNode(NewRow.concat("/TSeparatorKit1"));
                            tonatiuh.SetValue(NewRow.concat("/TSeparatorKit1"),"translation","".concat("",translationRow).concat(" 0 0"));
                            
                            //Change the  translation parameter for the next iteration

                            translationRow=translationRow+5.5;
                            tonatiuh.SetNodeName("Heliostat".concat("",j).concat("_Frame"));
	                   var helRow=NewRow.concat("/Heliostat".concat("",j).concat("_Frame"));
                            
                            //Create a new groupNode and rename it to Heliostat

                            tonatiuh.SelectNode(helRow);
                            tonatiuh.CreateGroupNode();
                            tonatiuh.SelectNode(helRow.concat("/TSeparatorKit1"));
	                   tonatiuh.SetNodeName("Heliostat");
                            tonatiuh.SelectNode(helRow.concat("/Heliostat"));

                            //Create a tracker as a child of Heliostat and set the amimingPoint to "0 130 74.25"

                            tonatiuh.CreateTracker("Heliostat_tracker");
                            tonatiuh.SetValue(helRow.concat("/Heliostat/Heliostat_tracker"),"aimingPoint","0 130 74.25");
                           

                      }
                     
            //Change the translation parameter for the next iteration

            trans=trans+5.5;
         
}

}}}

== Inserting the shape and  material ==

In the previous step we have created the struct in which the heliostats will be located. Now, we are going to insert them using the Pastelink way. This technique consists of the creation of an heliostat and the creation of a pointer to it to save memory.

{{{
//Creating the first heliostat

var i=1;
var j=1;

//get the path to put the heliostat

var path="//SunNode/RootNode/HeliostatField_Frame/Row0".concat("",i).concat("_Frame/Row/Heliostat").concat("",j).concat("_Frame/Heliostat");
tonatiuh.SelectNode(path);

//Create a tShapeKitNode which will contain the shape and the material of the heliostat

tonatiuh.CreateSurfaceNode();
tonatiuh.SelectNode(path.concat("/TShapeKit1"));

//Create the shape. It's going to be a "Spherical_rectangle"

tonatiuh.CreateShape("Spherical_rectangle");

//Create the material. It's going to be a "Specular_Standard_Material"

tonatiuh.CreateMaterial("Specular_Standard_Material");

//Set the "Spherical_rectangle properties"

tonatiuh.SetValue(path.concat("/TShapeKit1/Spherical_rectangle"),"radius","300");
tonatiuh.SetValue(path.concat("/TShapeKit1/Spherical_rectangle"),"widthX","5");
tonatiuh.SetValue(path.concat("/TShapeKit1/Spherical_rectangle"),"widthZ","5");
tonatiuh.SetValue(path.concat("/TShapeKit1/Spherical_rectangle"),"activeSide","INSIDE");

//Set the material properties.

tonatiuh.SetValue(path.concat("/TShapeKit1/Specular_Standard_Material"),"m_reflectivity","1");
tonatiuh.SelectNode(path.concat("/TShapeKit1"));

//Copy the node just created

tonatiuh.Copy();
//we need to paste it inall the files and columns.

for(i=1;i<=20;i++){
for(j=1;j<=25;j++){
      //we eliminate the first case because the heliostat has been created

      if(i==1 && j==1){
      }
      else{
      //Search the path whre we have to paste the heliostat

        var path="//SunNode/RootNode/HeliostatField_Frame/Row0".concat("",i).concat("_Frame/Row/Heliostat").concat("",j).concat("_Frame/Heliostat");
        
        //Select the node and make pasteLink

        tonatiuh.SelectNode(path);
        tonatiuh.PasteLink();
}
}
}

}}}

Now we have the whole system created.

== Simulating the system ==

 * Now, we can use some functions to define the sun or the amount of rays desired to simulate the system and then use Run() to simulate it.

 * We decided that we want to simulate 1000000 rays. To do that, type:  tonatiuh.!SetRaysPerIteration(1000000);

 * Now we need to define the sun. A default sun shape can be created one of the following lines:
{{{
 tonatiuh.SetSunshape("Buie_Sunshape");  //define a Buie_sunshape type
 tonatiuh.SetSunshape("Pillbox_Sunshape"); // define a Pillbox_sunshape type
}}}

 * If we want to change the sun azimuth and zenith we have two ways to do it:

{{{
tonatiuh.ChangeSunPosition(123,25); //Set the azimuth to 123 and zenith to 25

tonatiuh.ChangeSunPosition(2010,12,11,10,0,0,35.5,-5.23); 
//this function calculates the azimuth and zenith in the place 
//which coordinates are (35.5,-5.23) and date is 11/12/2010 at 10:00:00AM.
}}}

 * There are two functions to export Tonatiuh data, or we export all photon map or only a certain part.
{{{
tonatiuh.ExportAllPhotonMap("exportAll.dat"); 
//export the photon in a file called exportAll.dat

tonatiuh.ExportAllPhotonMap("exportNode.dat","//SunNode/RootNode/Target_frame/Target_shapeKit",true); 
//export the photon map of the node Target_ShapeKit to the file exportNode.dat

}}}

Tonatiuh script is based on ECMAScript specification and has 
default options implemented. To know more about them, you can find detailed information about by 
following this link: [http://developer.qt.nokia.com/doc/qt-4.7/ecmascript.html] 
or better this one: [http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf]

This is the end of the tutorial. If anybody has any doubts or experiences any problem, please report it here or in <a href="http://groups.google.com/group/tonatiuh-raytracer">Tonatiuh discussion forum</a>.